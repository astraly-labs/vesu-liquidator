use std::{sync::Arc, time::Duration};

use anyhow::{anyhow, Result};
use starknet::{
    core::types::{Call, Felt},
    providers::{jsonrpc::HttpTransport, JsonRpcClient},
};
use tokio::sync::mpsc::Receiver;
use tokio::time::interval;

use crate::{
    config::Config,
    services::oracle::LatestOraclePrices,
    storages::Storage,
    types::{
        account::StarknetAccount,
        position::{Position, PositionsMap},
    },
    utils::wait_for_tx,
};

const CHECK_POSITIONS_INTERVAL: u64 = 10;

pub struct MonitoringService {
    config: Config,
    rpc_client: Arc<JsonRpcClient<HttpTransport>>,
    account: StarknetAccount,
    positions_receiver: Receiver<(u64, Position)>,
    positions: PositionsMap,
    latest_oracle_prices: LatestOraclePrices,
    storage: Box<dyn Storage>,
}

impl MonitoringService {
    pub fn new(
        config: Config,
        rpc_client: Arc<JsonRpcClient<HttpTransport>>,
        account: StarknetAccount,
        positions_receiver: Receiver<(u64, Position)>,
        latest_oracle_prices: LatestOraclePrices,
        storage: Box<dyn Storage>,
    ) -> MonitoringService {
        MonitoringService {
            config,
            rpc_client,
            account,
            positions_receiver,
            positions: PositionsMap::from_storage(storage.as_ref()),
            latest_oracle_prices,
            storage,
        }
    }

    /// Starts the monitoring service.
    pub async fn start(mut self) -> Result<()> {
        let mut update_interval = interval(Duration::from_secs(CHECK_POSITIONS_INTERVAL));

        loop {
            tokio::select! {
                // Monitor the positions every N seconds
                _ = update_interval.tick() => {
                    self.monitor_positions_liquidability().await?;
                }

                // Insert the new positions indexed by the IndexerService
                maybe_position = self.positions_receiver.recv() => {
                    match maybe_position {
                        Some((block_number, new_position)) => {
                            self.positions.0.write().await.insert(new_position.key(), new_position);
                            self.storage.save(self.positions.0.read().await.clone(), block_number).await?;
                        }
                        None => {
                            return Err(anyhow!("â›” Monitoring stopped unexpectedly."));
                        }
                    }
                }
            }
        }
    }

    /// Update all monitored positions and check if it's worth to liquidate any.
    /// TODO: Check issue for multicall update:
    /// https://github.com/astraly-labs/vesu-liquidator/issues/12
    async fn monitor_positions_liquidability(&self) -> Result<()> {
        let monitored_positions = self.positions.0.read().await;
        if monitored_positions.is_empty() {
            return Ok(());
        }
        tracing::info!("[ðŸ”­ Monitoring] Checking if any position is liquidable...");
        for (_, position) in monitored_positions.iter() {
            if position.is_liquidable(&self.latest_oracle_prices).await {
                tracing::info!(
                    "[ðŸ”­ Monitoring] Liquidatable position found #{}!",
                    position.key()
                );
                self.try_to_liquidate_position(position).await?;
            }
        }
        tracing::info!("[ðŸ”­ Monitoring] ðŸ¤¨ They're good.. for now...");
        Ok(())
    }

    /// Check if a position is liquidable, computes the profitability and if it's worth it
    /// liquidate it.
    async fn try_to_liquidate_position(&self, position: &Position) -> Result<()> {
        let txs = self.get_tx(position).await?;
        tracing::info!(
            "[ðŸ”­ Monitoring] Trying to liquidiate position for {}!",
            position.debt.name
        );
        let tx_hash_felt = self.account.execute_txs(&txs).await?;
        let tx_hash = tx_hash_felt.to_string();
        self.wait_for_tx_to_be_accepted(&tx_hash).await?;
        tracing::info!(
            "[ðŸ”­ Monitoring] âœ… Liquidated position #{}! (TX #{})",
            position.key(),
            tx_hash
        );
        Ok(())
    }

    /// Simulates the profit generated by liquidating a given position. Returns the profit
    /// and the transactions needed to liquidate the position.
    async fn get_tx(&self, position: &Position) -> Result<Vec<Call>> {
        let liquidation_txs = position
            .get_liquidation_txs(&self.account, self.config.liquidate_address)
            .await?;

        Ok(liquidation_txs)
    }

    /// Waits for a TX to be accepted on-chain.
    pub async fn wait_for_tx_to_be_accepted(&self, tx_hash: &str) -> Result<()> {
        let tx_hash = Felt::from_hex(tx_hash)?;
        wait_for_tx(tx_hash, self.rpc_client.clone()).await?;
        Ok(())
    }
}
